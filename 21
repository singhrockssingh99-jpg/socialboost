import React, { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import { Loader, Send, MessageCircle, Facebook, Instagram, XCircle } from 'lucide-react';
import toast from 'react-hot-toast';

interface Message {
  id: number;
  content: string;
  sender: 'user' | 'contact';
  created_at: string;
}

interface Conversation {
  id: number;
  platform: 'facebook' | 'instagram';
  contact_name: string;
  last_message_at: string;
  messages: Message[];
}

const Conversations: React.FC = () => {
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const { user } = useAuth();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const fetchConversations = async () => {
    if (!user) return;
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('conversations')
        .select(`
          *,
          messages ( * )
        `)
        .eq('user_id', user.id)
        .order('last_message_at', { ascending: false });

      if (error) throw error;
      setConversations(data || []);
      if (data && data.length > 0) {
        setSelectedConversation(data[0]);
      }
    } catch (error: any) {
      toast.error('Baatcheet fetch karne mein samasya hui.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchConversations();
  }, [user]);

  useEffect(() => {
    if (!selectedConversation) return;

    const channel = supabase
      .channel(`messages:${selectedConversation.id}`)
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'messages',
          filter: `conversation_id=eq.${selectedConversation.id}`,
        },
        (payload) => {
          setSelectedConversation(prev => {
            if (!prev) return null;
            return {
              ...prev,
              messages: [...prev.messages, payload.new as Message],
            };
          });
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [selectedConversation]);
  
  useEffect(() => {
    scrollToBottom();
  }, [selectedConversation?.messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim() || !selectedConversation || !user) return;

    setSending(true);
    try {
      const { error } = await supabase.from('messages').insert({
        conversation_id: selectedConversation.id,
        user_id: user.id,
        content: newMessage,
        sender: 'user',
      });

      if (error) throw error;
      setNewMessage('');
    } catch (error: any) {
      toast.error('Message bhejne mein samasya hui.');
    } finally {
      setSending(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-full p-6">
        <Loader className="animate-spin text-blue-600" size={40} />
      </div>
    );
  }

  return (
    <div className="h-[calc(100vh-4rem)] flex">
      <div className="w-full md:w-1/3 lg:w-1/4 bg-white border-r border-gray-200 flex flex-col">
        <div className="p-4 border-b border-gray-200">
          <h1 className="text-xl font-bold text-gray-900">Baatcheet</h1>
        </div>
        <div className="flex-1 overflow-y-auto">
          {conversations.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <MessageCircle size={48} className="mx-auto text-gray-400" />
              <p className="mt-2">Koi baatcheet nahi mili.</p>
            </div>
          ) : (
            conversations.map(convo => (
              <div
                key={convo.id}
                onClick={() => setSelectedConversation(convo)}
                className={`p-4 cursor-pointer border-l-4 ${selectedConversation?.id === convo.id ? 'bg-blue-50 border-blue-600' : 'border-transparent hover:bg-gray-50'}`}
              >
                <div className="flex items-center justify-between">
                  <p className="font-semibold text-gray-900">{convo.contact_name}</p>
                  {convo.platform === 'facebook' ? <Facebook size={16} className="text-blue-600" /> : <Instagram size={16} className="text-pink-600" />}
                </div>
                <p className="text-sm text-gray-600 truncate">{convo.messages[convo.messages.length - 1]?.content}</p>
              </div>
            ))
          )}
        </div>
      </div>
      <div className="flex-1 flex flex-col bg-gray-50">
        {selectedConversation ? (
          <>
            <div className="p-4 bg-white border-b border-gray-200 flex items-center justify-between">
              <h2 className="text-lg font-semibold text-gray-900">{selectedConversation.contact_name}</h2>
            </div>
            <div className="flex-1 p-6 overflow-y-auto space-y-4">
              {selectedConversation.messages.map(msg => (
                <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-xs lg:max-w-md p-3 rounded-xl ${msg.sender === 'user' ? 'bg-blue-600 text-white' : 'bg-white text-gray-800 border border-gray-200'}`}>
                    <p>{msg.content}</p>
                    <p className={`text-xs mt-1 ${msg.sender === 'user' ? 'text-blue-200' : 'text-gray-500'}`}>{new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
            <div className="p-4 bg-white border-t border-gray-200">
              <form onSubmit={handleSendMessage} className="flex items-center gap-3">
                <input
                  type="text"
                  value={newMessage}
                  onChange={e => setNewMessage(e.target.value)}
                  placeholder="Message likhein..."
                  className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <button type="submit" disabled={sending} className="p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-400">
                  {sending ? <Loader size={20} className="animate-spin" /> : <Send size={20} />}
                </button>
              </form>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center text-center text-gray-500">
            <div>
              <MessageCircle size={64} className="mx-auto text-gray-400" />
              <p className="mt-4 text-lg">Dekhne ke liye ek baatcheet chunein</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Conversations;
