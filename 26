/*
# [Corrected Initial Schema Setup]
This script sets up the complete database schema for the SocialBoost application, following Supabase best practices by separating user profile data from the protected auth.users table.

## Query Description: This script is safe to run on a new project. It creates all necessary tables, relationships, storage buckets, and security policies. It creates a 'profiles' table to store user data and uses a trigger to automatically populate it upon new user creation. This avoids directly modifying the protected 'auth.users' table, resolving the previous permission error.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: false

## Structure Details:
- Tables created: profiles, media, posts, ads, leads, conversations.
- Functions created: handle_new_user().
- Triggers created: on_auth_user_created.
- Storage Buckets created: media_storage.

## Security Implications:
- RLS Status: Enabled on all new tables.
- Policy Changes: Creates policies to ensure users can only access and manage their own data.
- Auth Requirements: Policies rely on `auth.uid()` to identify the current user.

## Performance Impact:
- Indexes: Primary and foreign key indexes are created.
- Triggers: A trigger is added to `auth.users` to populate the `profiles` table.
- Estimated Impact: Minimal performance impact on a new project.
*/

-- 1. PROFILES TABLE
-- Stores public user data. Linked to auth.users.
CREATE TABLE public.profiles (
  id UUID NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';

-- 2. HELPER FUNCTION & TRIGGER
-- This function automatically creates a profile for a new user.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- This trigger fires after a new user is created in auth.users.
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 3. STORAGE BUCKET FOR MEDIA
-- Create a bucket for user-uploaded media with appropriate policies.
INSERT INTO storage.buckets (id, name, public)
VALUES ('media_storage', 'media_storage', false)
ON CONFLICT (id) DO NOTHING;

-- 4. MEDIA TABLE
-- Stores information about uploaded media files.
CREATE TABLE public.media (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  file_path TEXT NOT NULL,
  file_name TEXT NOT NULL,
  file_type TEXT,
  file_size BIGINT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX ON public.media(user_id);
COMMENT ON TABLE public.media IS 'Stores metadata for user-uploaded media files.';

-- 5. POSTS TABLE
-- Stores scheduled and published posts.
CREATE TABLE public.posts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  platform TEXT NOT NULL, -- 'facebook' or 'instagram'
  content TEXT,
  media_id UUID REFERENCES public.media(id),
  status TEXT NOT NULL DEFAULT 'draft', -- 'draft', 'scheduled', 'posted', 'error'
  scheduled_at TIMESTAMPTZ,
  posted_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX ON public.posts(user_id);
COMMENT ON TABLE public.posts IS 'Stores social media posts and their schedule information.';

-- 6. ADS TABLE
-- Stores information about ad campaigns.
CREATE TABLE public.ads (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  platform TEXT NOT NULL, -- 'facebook' or 'instagram'
  status TEXT NOT NULL DEFAULT 'draft', -- 'draft', 'active', 'paused', 'completed'
  budget NUMERIC,
  spent NUMERIC DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX ON public.ads(user_id);
COMMENT ON TABLE public.ads IS 'Manages advertising campaigns and their performance metrics.';

-- 7. LEADS TABLE
-- Stores qualified leads from social media interactions.
CREATE TABLE public.leads (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  location TEXT,
  source TEXT,
  score INT DEFAULT 0,
  status TEXT NOT NULL DEFAULT 'new', -- 'new', 'nurturing', 'qualified', 'lost'
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX ON public.leads(user_id);
COMMENT ON TABLE public.leads IS 'Stores and manages leads acquired through social media.';

-- 8. CONVERSATIONS TABLE
-- Stores messages from Facebook and Instagram.
CREATE TABLE public.conversations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  contact_name TEXT NOT NULL,
  contact_avatar_url TEXT,
  platform TEXT NOT NULL,
  last_message TEXT,
  last_message_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX ON public.conversations(user_id);
COMMENT ON TABLE public.conversations IS 'Unified inbox for social media messages.';

-- 9. ROW LEVEL SECURITY (RLS) POLICIES
-- Enable RLS for all tables.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.media ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;

-- Policies for PROFILES
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Policies for MEDIA
CREATE POLICY "Users can manage their own media." ON public.media FOR ALL USING (auth.uid() = user_id);

-- Policies for POSTS
CREATE POLICY "Users can manage their own posts." ON public.posts FOR ALL USING (auth.uid() = user_id);

-- Policies for ADS
CREATE POLICY "Users can manage their own ads." ON public.ads FOR ALL USING (auth.uid() = user_id);

-- Policies for LEADS
CREATE POLICY "Users can manage their own leads." ON public.leads FOR ALL USING (auth.uid() = user_id);

-- Policies for CONVERSATIONS
CREATE POLICY "Users can manage their own conversations." ON public.conversations FOR ALL USING (auth.uid() = user_id);

-- Policies for STORAGE
CREATE POLICY "Users can manage their own media files in storage."
ON storage.objects FOR ALL
USING ( bucket_id = 'media_storage' AND (select auth.uid()::text) = owner_id );
