/*
          # SocialBoost Initial Schema
          This migration sets up the complete database schema for the SocialBoost application.

          ## Query Description: This script is safe to run on a new, empty Supabase project. It creates all necessary tables, types, functions, and security policies for the application to function correctly. It does NOT contain any destructive operations like dropping tables.
          
          ## Metadata:
          - Schema-Category: "Structural"
          - Impact-Level: "Low"
          - Requires-Backup: false
          - Reversible: true
          
          ## Structure Details:
          - **Enums**: platform_enum, post_status_enum, ad_status_enum, lead_status_enum, message_sender_enum
          - **Tables**: profiles, media, posts, post_media, ads, ad_metrics, leads, conversations, messages
          - **Functions**: create_user_profile()
          - **Triggers**: on_auth_user_created
          - **Storage**: Creates 'media_uploads' bucket and policies.
          
          ## Security Implications:
          - RLS Status: Enabled on all tables.
          - Policy Changes: Creates SELECT, INSERT, UPDATE, DELETE policies for all tables, ensuring users can only access their own data.
          - Auth Requirements: Policies rely on `auth.uid()`.
          
          ## Performance Impact:
          - Indexes: Primary keys and foreign keys are indexed by default.
          - Triggers: A single trigger is added to `auth.users` for profile creation.
          - Estimated Impact: Negligible on a new project.
          */

-- 1. Create custom types (Enums)
CREATE TYPE public.platform_enum AS ENUM ('facebook', 'instagram');
CREATE TYPE public.post_status_enum AS ENUM ('draft', 'scheduled', 'posted', 'failed');
CREATE TYPE public.ad_status_enum AS ENUM ('draft', 'active', 'paused', 'completed');
CREATE TYPE public.lead_status_enum AS ENUM ('new', 'nurturing', 'qualified', 'lost');
CREATE TYPE public.message_sender_enum AS ENUM ('user', 'contact', 'bot');

-- 2. Create Profiles table
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.profiles IS 'Stores public profile information for each user.';

-- 3. Create Media table for Media Library
CREATE TABLE public.media (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL,
  file_type TEXT,
  file_size BIGINT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.media IS 'Stores media files uploaded by users.';

-- 4. Create Posts table for Scheduler
CREATE TABLE public.posts (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  content TEXT,
  platform public.platform_enum NOT NULL,
  status public.post_status_enum NOT NULL DEFAULT 'draft',
  scheduled_at TIMESTAMPTZ NOT NULL,
  posted_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.posts IS 'Stores scheduled posts for social media platforms.';

-- 5. Create a join table for posts and media
CREATE TABLE public.post_media (
  post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
  media_id BIGINT NOT NULL REFERENCES public.media(id) ON DELETE CASCADE,
  PRIMARY KEY (post_id, media_id)
);
COMMENT ON TABLE public.post_media IS 'Links posts to their associated media files.';

-- 6. Create Ads table for Ads Manager
CREATE TABLE public.ads (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  platform public.platform_enum NOT NULL,
  status public.ad_status_enum NOT NULL DEFAULT 'draft',
  budget NUMERIC(10, 2) NOT NULL,
  start_date TIMESTAMPTZ,
  end_date TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.ads IS 'Stores ad campaign information.';

-- 7. Create Ad Metrics table
CREATE TABLE public.ad_metrics (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  ad_id BIGINT NOT NULL REFERENCES public.ads(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  impressions INTEGER DEFAULT 0,
  clicks INTEGER DEFAULT 0,
  spend NUMERIC(10, 2) DEFAULT 0,
  UNIQUE(ad_id, date)
);
COMMENT ON TABLE public.ad_metrics IS 'Stores daily performance metrics for ad campaigns.';

-- 8. Create Leads table for Lead Manager
CREATE TABLE public.leads (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  email TEXT,
  phone TEXT,
  company TEXT,
  location TEXT,
  source TEXT,
  score INTEGER DEFAULT 0,
  status public.lead_status_enum NOT NULL DEFAULT 'new',
  last_contacted_at TIMESTAMPTZ,
  notes TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.leads IS 'Stores lead information for users.';

-- 9. Create Conversations table
CREATE TABLE public.conversations (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  contact_name TEXT NOT NULL,
  contact_avatar_url TEXT,
  platform public.platform_enum NOT NULL,
  last_message_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
COMMENT ON TABLE public.conversations IS 'Represents a conversation thread with a contact.';

-- 10. Create Messages table
CREATE TABLE public.messages (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  conversation_id BIGINT NOT NULL REFERENCES public.conversations(id) ON DELETE CASCADE,
  sender_type public.message_sender_enum NOT NULL,
  content TEXT NOT NULL,
  sent_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_read BOOLEAN DEFAULT FALSE
);
COMMENT ON TABLE public.messages IS 'Stores individual messages within a conversation.';

-- 11. Set up trigger to create a profile for new users
CREATE OR REPLACE FUNCTION public.create_user_profile()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, avatar_url)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.create_user_profile();
COMMENT ON TRIGGER on_auth_user_created ON auth.users IS 'Creates a public profile for each new user.';

-- 12. Set up Storage bucket for media
INSERT INTO storage.buckets (id, name, public)
VALUES ('media_uploads', 'media_uploads', false)
ON CONFLICT (id) DO NOTHING;
COMMENT ON TABLE storage.buckets IS 'Stores buckets for file storage.';

-- 13. Enable Row Level Security (RLS) for all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.media ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.post_media ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ad_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;

-- 14. Create RLS policies
-- Profiles
CREATE POLICY "Users can view their own profile." ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update their own profile." ON public.profiles FOR UPDATE USING (auth.uid() = id);

-- Media
CREATE POLICY "Users can manage their own media." ON public.media FOR ALL USING (auth.uid() = user_id);

-- Posts
CREATE POLICY "Users can manage their own posts." ON public.posts FOR ALL USING (auth.uid() = user_id);

-- Post Media
CREATE POLICY "Users can manage their own post_media links." ON public.post_media FOR ALL
USING (
  (SELECT user_id FROM public.posts WHERE id = post_id) = auth.uid()
);

-- Ads
CREATE POLICY "Users can manage their own ads." ON public.ads FOR ALL USING (auth.uid() = user_id);

-- Ad Metrics
CREATE POLICY "Users can manage metrics for their own ads." ON public.ad_metrics FOR ALL
USING (
  (SELECT user_id FROM public.ads WHERE id = ad_id) = auth.uid()
);

-- Leads
CREATE POLICY "Users can manage their own leads." ON public.leads FOR ALL USING (auth.uid() = user_id);

-- Conversations
CREATE POLICY "Users can manage their own conversations." ON public.conversations FOR ALL USING (auth.uid() = user_id);

-- Messages
CREATE POLICY "Users can manage messages in their own conversations." ON public.messages FOR ALL
USING (
  (SELECT user_id FROM public.conversations WHERE id = conversation_id) = auth.uid()
);

-- Storage Policies
CREATE POLICY "Users can manage their own folder in media_uploads" ON storage.objects FOR ALL
TO authenticated
USING ( bucket_id = 'media_uploads' AND (storage.foldername(name))[1] = auth.uid()::text );
