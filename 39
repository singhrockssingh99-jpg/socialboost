import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // This is needed if you're planning to invoke your function from a browser.
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data: { user } } = await supabaseClient.auth.getUser();
    if (!user) {
      return new Response(JSON.stringify({ error: 'User not authenticated' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401,
      });
    }

    const { data: settings, error: settingsError } = await supabaseClient
      .from('settings')
      .select('fb_page_id')
      .eq('user_id', user.id)
      .single();

    if (settingsError || !settings?.fb_page_id) {
      return new Response(JSON.stringify({ error: 'Facebook Page ID not configured.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      });
    }

    const FB_PAGE_ID = settings.fb_page_id;
    const FB_PAGE_ACCESS_TOKEN = Deno.env.get('FB_PAGE_ACCESS_TOKEN');

    if (!FB_PAGE_ACCESS_TOKEN) {
      return new Response(JSON.stringify({ error: 'Facebook Access Token is not configured in secrets.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      });
    }

    const url = `https://graph.facebook.com/v19.0/${FB_PAGE_ID}/posts?fields=message,created_time,attachments&access_token=${FB_PAGE_ACCESS_TOKEN}`;

    const response = await fetch(url);
    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Facebook API error: ${errorData.error.message}`);
    }
    const { data: postsData } = await response.json();

    if (!postsData || postsData.length === 0) {
      return new Response(JSON.stringify({ message: 'No new posts to sync.' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      });
    }

    const postsToInsert = postsData.map((post: any) => ({
      user_id: user.id,
      content: post.message || 'No content',
      platform: 'facebook',
      scheduled_at: post.created_time,
      status: 'posted',
      media_url: post.attachments?.data[0]?.media?.image?.src,
      fb_post_id: post.id,
    }));
    
    // Using upsert to avoid duplicating posts on multiple syncs
    const { error: insertError } = await supabaseClient
      .from('posts')
      .upsert(postsToInsert, { onConflict: 'fb_post_id, user_id' });

    if (insertError) throw insertError;

    return new Response(JSON.stringify({ message: `Successfully synced ${postsToInsert.length} posts.` }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    })
  }
})
