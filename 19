import React, { useState, useEffect, useCallback } from 'react';
import { Calendar as CalendarIcon, Clock, Plus, Facebook, Instagram, Loader, XCircle, RefreshCw } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import toast from 'react-hot-toast';
import CreatePostModal from '../components/CreatePostModal';

interface Post {
  id: number;
  content: string;
  platform: 'facebook' | 'instagram';
  scheduled_at: string;
  status: 'pending' | 'scheduled' | 'posted';
  media_url?: string;
}

const Scheduler: React.FC = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [syncing, setSyncing] = useState(false);
  const { user } = useAuth();

  const fetchPosts = useCallback(async () => {
    if (!user) return;
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('posts')
        .select('*')
        .eq('user_id', user.id)
        .order('scheduled_at', { ascending: false });

      if (error) throw error;
      setPosts(data as Post[]);
    } catch (error) {
      toast.error('Posts fetch karne mein samasya hui.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchPosts();
  }, [fetchPosts]);
  
  const handleSync = async () => {
    setSyncing(true);
    const syncToast = toast.loading('Facebook ke saath sync kiya ja raha hai...');
    try {
      const { data, error } = await supabase.functions.invoke('sync-facebook-posts');
      
      if (error) throw new Error(error.message);
      if (data.error) throw new Error(data.error);

      toast.success(data.message || 'Sync safaltapoorvak poora hua!', { id: syncToast });
      fetchPosts(); // Refresh posts after sync
    } catch (error: any) {
      toast.error(`Sync fail ho gaya: ${error.message}`, { id: syncToast });
    } finally {
      setSyncing(false);
    }
  };

  const handleDelete = async (postId: number) => {
    if (!window.confirm('Kya aap is post ko mitana chahte hain?')) return;
    
    const deleteToast = toast.loading('Post mitaya ja raha hai...');
    try {
      const { error } = await supabase.from('posts').delete().eq('id', postId);
      if (error) throw error;
      toast.success('Post safaltapoorvak mita diya gaya!', { id: deleteToast });
      fetchPosts();
    } catch (error) {
      toast.error('Post mitane mein samasya hui.', { id: deleteToast });
    }
  };

  return (
    <>
      <div className="p-4 md:p-6 lg:p-8 space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Post Scheduler</h1>
            <p className="text-gray-600 mt-1">Apne Facebook & Instagram posts schedule aur manage karein</p>
          </div>
          <div className="flex items-center gap-3">
            <button
              onClick={handleSync}
              disabled={syncing}
              className="flex items-center justify-center gap-2 px-4 py-3 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors font-medium disabled:opacity-50"
            >
              <RefreshCw size={18} className={syncing ? 'animate-spin' : ''} />
              Sync with Facebook
            </button>
            <button
              onClick={() => setIsModalOpen(true)}
              className="flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
            >
              <Plus size={20} />
              Post Schedule Karein
            </button>
          </div>
        </div>

        <div className="bg-white rounded-xl border border-gray-200 p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
            <Clock size={20} />
            Scheduled & Past Posts
          </h2>
          {loading ? (
            <div className="flex justify-center items-center h-64">
              <Loader className="animate-spin text-blue-600" size={40} />
            </div>
          ) : posts.length === 0 ? (
            <div className="text-center py-16">
              <XCircle size={48} className="mx-auto text-gray-400" />
              <h3 className="mt-4 text-lg font-semibold text-gray-900">Koi posts nahi hain</h3>
              <p className="mt-1 text-gray-500">Shuru karne ke liye ek naya post schedule karein ya Facebook se sync karein.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {posts.map((post) => (
                <div key={post.id} className="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors">
                  <div className="flex items-start gap-4">
                    {post.media_url && (
                      <div className="w-20 h-20 bg-gray-100 rounded-lg overflow-hidden flex-shrink-0">
                        <img src={post.media_url} alt="Post preview" className="w-full h-full object-cover" />
                      </div>
                    )}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between gap-4 mb-2">
                        <p className="text-sm font-medium text-gray-900">{post.content}</p>
                        <div className={`w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 ${post.platform === 'facebook' ? 'bg-blue-100' : 'bg-gradient-to-br from-purple-100 to-pink-100'}`}>
                          {post.platform === 'facebook' ? (
                            <Facebook size={16} className="text-blue-600" />
                          ) : (
                            <Instagram size={16} className="text-pink-600" />
                          )}
                        </div>
                      </div>
                      <div className="flex flex-wrap items-center gap-3 text-sm text-gray-600">
                        <div className="flex items-center gap-1">
                          <CalendarIcon size={14} />
                          <span>{new Date(post.scheduled_at).toLocaleDateString()}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock size={14} />
                          <span>{new Date(post.scheduled_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium capitalize ${
                          post.status === 'scheduled' ? 'bg-yellow-100 text-yellow-700' :
                          post.status === 'posted' ? 'bg-green-100 text-green-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {post.status}
                        </span>
                      </div>
                      <div className="flex items-center gap-2 mt-3">
                        <button onClick={() => handleDelete(post.id)} className="text-sm font-medium text-red-600 hover:text-red-700">Mitayein</button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
      {isModalOpen && <CreatePostModal onClose={() => setIsModalOpen(false)} onPostCreated={fetchPosts} />}
    </>
  );
};

export default Scheduler;
