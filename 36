import React, { useState, useEffect } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import { X, Loader, Image, Facebook, Instagram } from 'lucide-react';
import toast from 'react-hot-toast';

interface CreatePostModalProps {
  onClose: () => void;
  onPostCreated: () => void;
}

interface MediaFile {
  id: number;
  file_name: string;
  publicUrl: string;
}

const CreatePostModal: React.FC<CreatePostModalProps> = ({ onClose, onPostCreated }) => {
  const [content, setContent] = useState('');
  const [platform, setPlatform] = useState<'facebook' | 'instagram'>('facebook');
  const [scheduledAt, setScheduledAt] = useState('');
  const [media, setMedia] = useState<MediaFile[]>([]);
  const [selectedMediaUrl, setSelectedMediaUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const { user } = useAuth();

  useEffect(() => {
    const fetchMedia = async () => {
      if (!user) return;
      const { data, error } = await supabase
        .from('media')
        .select('id, file_name, file_path')
        .eq('user_id', user.id);

      if (error) {
        toast.error('Media fetch karne mein samasya hui.');
        return;
      }
      
      const filesWithUrls = data.map(file => {
        const { data: { publicUrl } } = supabase.storage.from('media_storage').getPublicUrl(file.file_path);
        return { ...file, publicUrl };
      });
      setMedia(filesWithUrls);
    };
    fetchMedia();
  }, [user]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!content || !scheduledAt || !user) {
      toast.error('Kripya sabhi zaroori fields bharein.');
      return;
    }

    setLoading(true);
    const createToast = toast.loading('Post banaya ja raha hai...');

    try {
      const { error } = await supabase.from('posts').insert({
        user_id: user.id,
        content,
        platform,
        scheduled_at: new Date(scheduledAt).toISOString(),
        status: 'scheduled',
        media_url: selectedMediaUrl,
      });

      if (error) throw error;

      toast.success('Post safaltapoorvak schedule ho gaya!', { id: createToast });
      onPostCreated();
      onClose();
    } catch (error: any) {
      toast.error(`Post banane mein samasya hui: ${error.message}`, { id: createToast });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] flex flex-col">
        <div className="p-6 border-b border-gray-200 flex items-center justify-between">
          <h2 className="text-xl font-bold text-gray-900">Naya Post Schedule Karein</h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X size={24} />
          </button>
        </div>
        <form onSubmit={handleSubmit} className="flex-1 overflow-y-auto p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Platform</label>
            <div className="flex gap-2">
              <button type="button" onClick={() => setPlatform('facebook')} className={`flex-1 flex items-center justify-center gap-2 p-3 rounded-lg border-2 transition-colors ${platform === 'facebook' ? 'border-blue-600 bg-blue-50' : 'border-gray-300'}`}>
                <Facebook size={20} className="text-blue-600" /> Facebook
              </button>
              <button type="button" onClick={() => setPlatform('instagram')} className={`flex-1 flex items-center justify-center gap-2 p-3 rounded-lg border-2 transition-colors ${platform === 'instagram' ? 'border-pink-600 bg-pink-50' : 'border-gray-300'}`}>
                <Instagram size={20} className="text-pink-600" /> Instagram
              </button>
            </div>
          </div>
          <div>
            <label htmlFor="content" className="block text-sm font-medium text-gray-700 mb-1">Content</label>
            <textarea
              id="content"
              rows={4}
              value={content}
              onChange={e => setContent(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Aapka post yahan likhein..."
              required
            />
          </div>
          <div>
            <label htmlFor="scheduledAt" className="block text-sm font-medium text-gray-700 mb-1">Schedule Time</label>
            <input
              type="datetime-local"
              id="scheduledAt"
              value={scheduledAt}
              onChange={e => setScheduledAt(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Media Chunein (Optional)</label>
            <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-2 max-h-48 overflow-y-auto p-2 bg-gray-50 rounded-lg border">
              {media.map(file => (
                <div key={file.id} onClick={() => setSelectedMediaUrl(file.publicUrl)} className={`relative aspect-square rounded-md overflow-hidden cursor-pointer border-2 ${selectedMediaUrl === file.publicUrl ? 'border-blue-600' : 'border-transparent'}`}>
                  <img src={file.publicUrl} alt={file.file_name} className="w-full h-full object-cover" />
                </div>
              ))}
              {media.length === 0 && <p className="col-span-full text-center text-gray-500 p-4">Koi media nahi mila.</p>}
            </div>
          </div>
        </form>
        <div className="p-6 bg-gray-50 border-t border-gray-200 flex justify-end gap-3">
          <button onClick={onClose} className="px-6 py-2.5 bg-white border border-gray-300 rounded-lg hover:bg-gray-100">Cancel</button>
          <button onClick={handleSubmit} disabled={loading} className="px-6 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-400 flex items-center gap-2">
            {loading && <Loader size={18} className="animate-spin" />}
            Schedule Post
          </button>
        </div>
      </div>
    </div>
  );
};

export default CreatePostModal;
