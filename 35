/*
# [Feature Expansion: Scheduler & Ads Manager]
This migration adds the necessary tables to support the Post Scheduler and Ads Manager features. It creates the `posts` and `ads` tables and configures Row Level Security to ensure data privacy.

## Query Description:
This is a non-destructive operation that adds new tables and policies. It does not modify or delete any existing data in your `profiles`, `media`, `leads`, or `conversations` tables. No backup is strictly required, but it's always a good practice.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "Low"
- Requires-Backup: false
- Reversible: true (by dropping the new tables and policies)

## Structure Details:
- **New Tables Created:**
  - `public.posts`: Stores data for scheduled posts.
  - `public.ads`: Stores data for ad campaigns.
- **Relationships Added:**
  - `posts.user_id` -> `profiles.id`
  - `posts.media_id` -> `media.id`
  - `ads.user_id` -> `profiles.id`
  - `ads.media_id` -> `media.id`

## Security Implications:
- RLS Status: Enabled on new tables.
- Policy Changes: Yes. New policies are added for the `posts` and `ads` tables to restrict access to the data owner.
- Auth Requirements: Users must be authenticated to interact with the new tables.

## Performance Impact:
- Indexes: Primary keys and foreign keys are indexed by default.
- Triggers: None.
- Estimated Impact: Low. This change adds new tables and will not impact the performance of existing queries.
*/

-- 1. Create the `posts` table for the Scheduler
CREATE TABLE public.posts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    media_id bigint REFERENCES public.media(id) ON DELETE SET NULL,
    platform text NOT NULL CHECK (platform IN ('facebook', 'instagram')),
    content text NOT NULL,
    status text NOT NULL CHECK (status IN ('scheduled', 'posted', 'failed')) DEFAULT 'scheduled',
    scheduled_at timestamptz NOT NULL,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.posts IS 'Stores scheduled posts for users.';

-- 2. Enable RLS on the `posts` table
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;

-- 3. Create RLS policies for the `posts` table
CREATE POLICY "Users can manage their own posts"
ON public.posts
FOR ALL
USING (auth.uid() = user_id);

-- 4. Create the `ads` table for the Ads Manager
CREATE TABLE public.ads (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    media_id bigint REFERENCES public.media(id) ON DELETE SET NULL,
    name text NOT NULL,
    platform text NOT NULL CHECK (platform IN ('facebook', 'instagram')),
    status text NOT NULL CHECK (status IN ('active', 'draft', 'completed')) DEFAULT 'draft',
    budget numeric(10, 2) DEFAULT 0.00,
    spent numeric(10, 2) DEFAULT 0.00,
    impressions integer DEFAULT 0,
    clicks integer DEFAULT 0,
    created_at timestamptz NOT NULL DEFAULT now()
);
COMMENT ON TABLE public.ads IS 'Stores ad campaigns for users.';

-- 5. Enable RLS on the `ads` table
ALTER TABLE public.ads ENABLE ROW LEVEL SECURITY;

-- 6. Create RLS policies for the `ads` table
CREATE POLICY "Users can manage their own ads"
ON public.ads
FOR ALL
USING (auth.uid() = user_id);
