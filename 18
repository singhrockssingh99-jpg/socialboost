import React, { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import { UploadCloud, Trash2, Image, Video, FileText, Loader, XCircle } from 'lucide-react';
import toast from 'react-hot-toast';

interface MediaFile {
  id: number;
  file_name: string;
  file_path: string;
  file_type: string;
  publicUrl: string;
}

const MediaLibrary: React.FC = () => {
  const [files, setFiles] = useState<MediaFile[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<number[]>([]);
  const { user } = useAuth();

  const fetchFiles = useCallback(async () => {
    if (!user) return;
    try {
      setLoading(true);
      const { data: mediaData, error } = await supabase
        .from('media')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;

      const filesWithUrls = mediaData.map(file => {
        const { data: { publicUrl } } = supabase.storage.from('media_storage').getPublicUrl(file.file_path);
        return { ...file, publicUrl };
      });

      setFiles(filesWithUrls);
    } catch (error: any) {
      toast.error('Media fetch karne mein samasya hui.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchFiles();
  }, [fetchFiles]);

  const handleUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || e.target.files.length === 0 || !user) return;

    setUploading(true);
    const file = e.target.files[0];
    const filePath = `${user.id}/${crypto.randomUUID()}-${file.name}`;
    
    const uploadToast = toast.loading('Media upload ho raha hai...');

    try {
      const { error: uploadError } = await supabase.storage
        .from('media_storage')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      const { error: dbError } = await supabase.from('media').insert({
        user_id: user.id,
        file_name: file.name,
        file_path: filePath,
        file_type: file.type,
        file_size: file.size,
      });

      if (dbError) throw dbError;

      toast.success('Media safaltapoorvak upload ho gaya!', { id: uploadToast });
      await fetchFiles();
    } catch (error: any) {
      toast.error(`Upload fail ho gaya: ${error.message}`, { id: uploadToast });
    } finally {
      setUploading(false);
      e.target.value = ''; // Reset file input
    }
  };

  const handleDelete = async () => {
    if (selectedFiles.length === 0) return;

    const confirmDelete = window.confirm(`Kya aap ${selectedFiles.length} file(s) mitana chahte hain?`);
    if (!confirmDelete) return;

    const deleteToast = toast.loading('Files mitaye ja rahe hain...');

    const filesToDelete = files.filter(f => selectedFiles.includes(f.id));
    const pathsToDelete = filesToDelete.map(f => f.file_path);

    try {
      const { error: storageError } = await supabase.storage.from('media_storage').remove(pathsToDelete);
      if (storageError) throw storageError;

      const { error: dbError } = await supabase.from('media').delete().in('id', selectedFiles);
      if (dbError) throw dbError;

      toast.success('Files safaltapoorvak mita diye gaye!', { id: deleteToast });
      setSelectedFiles([]);
      await fetchFiles();
    } catch (error: any) {
      toast.error(`Mitane mein samasya hui: ${error.message}`, { id: deleteToast });
    }
  };

  const toggleSelection = (fileId: number) => {
    setSelectedFiles(prev =>
      prev.includes(fileId) ? prev.filter(id => id !== fileId) : [...prev, fileId]
    );
  };

  const getFileIcon = (fileType: string) => {
    if (fileType.startsWith('image/')) return <Image className="w-10 h-10 text-gray-500" />;
    if (fileType.startsWith('video/')) return <Video className="w-10 h-10 text-gray-500" />;
    return <FileText className="w-10 h-10 text-gray-500" />;
  };

  return (
    <div className="p-4 md:p-6 lg:p-8 space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Media Library</h1>
          <p className="text-gray-600 mt-1">Apne saare photos aur videos ek jagah manage karein</p>
        </div>
        <div className="flex items-center gap-3">
          {selectedFiles.length > 0 && (
            <button
              onClick={handleDelete}
              className="flex items-center justify-center gap-2 px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium"
            >
              <Trash2 size={20} />
              Mitayein ({selectedFiles.length})
            </button>
          )}
          <label className="flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium cursor-pointer">
            {uploading ? <Loader size={20} className="animate-spin" /> : <UploadCloud size={20} />}
            Media Upload Karein
            <input type="file" hidden onChange={handleUpload} disabled={uploading} />
          </label>
        </div>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <Loader className="animate-spin text-blue-600" size={40} />
        </div>
      ) : files.length === 0 ? (
        <div className="text-center py-16 bg-white rounded-xl border border-gray-200">
          <XCircle size={48} className="mx-auto text-gray-400" />
          <h3 className="mt-4 text-lg font-semibold text-gray-900">Koi media nahi mila</h3>
          <p className="mt-1 text-gray-500">Shuru karne ke liye kuch files upload karein.</p>
        </div>
      ) : (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
          {files.map(file => (
            <div
              key={file.id}
              onClick={() => toggleSelection(file.id)}
              className={`relative group bg-white rounded-lg border-2 transition-all cursor-pointer ${selectedFiles.includes(file.id) ? 'border-blue-600 shadow-md' : 'border-gray-200 hover:border-gray-300'}`}
            >
              <div className="aspect-square w-full flex items-center justify-center overflow-hidden rounded-t-md">
                {file.file_type.startsWith('image/') ? (
                  <img src={file.publicUrl} alt={file.file_name} className="w-full h-full object-cover" />
                ) : (
                  <div className="p-4">{getFileIcon(file.file_type)}</div>
                )}
              </div>
              <div className="p-2 border-t border-gray-200">
                <p className="text-sm text-gray-800 font-medium truncate">{file.file_name}</p>
              </div>
              {selectedFiles.includes(file.id) && (
                <div className="absolute top-2 right-2 w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center border-2 border-white">
                  <svg className="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default MediaLibrary;
