import React, { useState, useEffect, useCallback } from 'react';
import { Plus, Target, DollarSign, Eye, MousePointerClick, Loader, XCircle } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import toast from 'react-hot-toast';
import CreateAdModal from '../components/CreateAdModal';

interface Ad {
  id: number;
  name: string;
  platform: 'facebook' | 'instagram';
  budget: number;
  status: 'active' | 'draft' | 'completed';
  impressions?: number;
  clicks?: number;
  target_audience?: string;
}

const Ads: React.FC = () => {
  const [ads, setAds] = useState<Ad[]>([]);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'active' | 'draft' | 'completed'>('active');
  const { user } = useAuth();

  const fetchAds = useCallback(async () => {
    if (!user) return;
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('ads')
        .select('*')
        .eq('user_id', user.id);

      if (error) throw error;
      setAds(data as Ad[]);
    } catch (error) {
      toast.error('Ads fetch karne mein samasya hui.');
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchAds();
  }, [fetchAds]);

  const filteredAds = ads.filter(ad => ad.status === activeTab);
  
  const summaryStats = {
    totalSpend: ads.reduce((sum, ad) => sum + ad.budget, 0),
    activeCampaigns: ads.filter(ad => ad.status === 'active').length,
    totalImpressions: ads.reduce((sum, ad) => sum + (ad.impressions || 0), 0),
    totalClicks: ads.reduce((sum, ad) => sum + (ad.clicks || 0), 0),
  };

  return (
    <>
      <div className="p-4 md:p-6 lg:p-8 space-y-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Ads Manager</h1>
            <p className="text-gray-600 mt-1">Apne Facebook & Instagram marketplace ads banayein aur manage karein</p>
          </div>
          <button
            onClick={() => setIsModalOpen(true)}
            className="flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
            <Plus size={20} />
            Ad Banayein
          </button>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[
            { label: 'Kul Kharch', value: `$${summaryStats.totalSpend.toFixed(2)}`, icon: DollarSign, color: 'blue' },
            { label: 'Active Campaigns', value: summaryStats.activeCampaigns.toString(), icon: Target, color: 'green' },
            { label: 'Kul Impressions', value: `${(summaryStats.totalImpressions / 1000).toFixed(1)}K`, icon: Eye, color: 'purple' },
            { label: 'Kul Clicks', value: summaryStats.totalClicks.toString(), icon: MousePointerClick, color: 'orange' },
          ].map((stat) => {
            const Icon = stat.icon;
            return (
              <div key={stat.label} className="bg-white rounded-xl border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-3">
                  <div className={`w-10 h-10 bg-${stat.color}-100 rounded-lg flex items-center justify-center`}>
                    <Icon size={20} className={`text-${stat.color}-600`} />
                  </div>
                </div>
                <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                <p className="text-sm text-gray-600 mt-1">{stat.label}</p>
              </div>
            );
          })}
        </div>

        <div className="bg-white rounded-xl border border-gray-200">
          <div className="border-b border-gray-200 p-4">
            <div className="flex gap-1">
              {[
                { id: 'active', label: 'Active' },
                { id: 'draft', label: 'Draft' },
                { id: 'completed', label: 'Poora Hua' }
              ].map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as typeof activeTab)}
                  className={`px-4 py-2 rounded-lg font-medium transition-colors capitalize ${
                    activeTab === tab.id
                      ? 'bg-blue-50 text-blue-600'
                      : 'text-gray-600 hover:bg-gray-50'
                  }`}
                >
                  {tab.label}
                </button>
              ))}
            </div>
          </div>

          <div className="p-6 space-y-4">
            {loading ? (
              <div className="flex justify-center items-center h-64">
                <Loader className="animate-spin text-blue-600" size={40} />
              </div>
            ) : filteredAds.length === 0 ? (
              <div className="text-center py-16">
                <XCircle size={48} className="mx-auto text-gray-400" />
                <h3 className="mt-4 text-lg font-semibold text-gray-900">Is tab mein koi ads nahi hain</h3>
              </div>
            ) : (
              filteredAds.map((ad) => {
                const ctr = ad.impressions && ad.clicks ? ((ad.clicks / ad.impressions) * 100).toFixed(2) : '0.00';
                return (
                  <div key={ad.id} className="border border-gray-200 rounded-lg p-4 hover:border-gray-300 transition-colors">
                    <div className="flex flex-col md:flex-row md:items-start gap-4">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between gap-4 mb-3">
                          <div>
                            <h3 className="font-semibold text-gray-900">{ad.name}</h3>
                            <p className="text-sm text-gray-600 mt-1 capitalize">{ad.platform} Marketplace</p>
                          </div>
                          <span className={`px-3 py-1 rounded-full text-xs font-medium capitalize ${
                            ad.status === 'active' ? 'bg-green-100 text-green-700' :
                            ad.status === 'draft' ? 'bg-yellow-100 text-yellow-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>
                            {ad.status === 'completed' ? 'Poora Hua' : ad.status}
                          </span>
                        </div>
                        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                          <div>
                            <p className="text-xs text-gray-600">Budget</p>
                            <p className="text-sm font-semibold text-gray-900 mt-1">${ad.budget.toFixed(2)}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-600">Kharch</p>
                            <p className="text-sm font-semibold text-gray-900 mt-1">$0.00</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-600">Impressions</p>
                            <p className="text-sm font-semibold text-gray-900 mt-1">{(ad.impressions || 0).toLocaleString()}</p>
                          </div>
                          <div>
                            <p className="text-xs text-gray-600">CTR</p>
                            <p className="text-sm font-semibold text-gray-900 mt-1">{ctr}%</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </div>
      </div>
      {isModalOpen && <CreateAdModal onClose={() => setIsModalOpen(false)} onAdCreated={fetchAds} />}
    </>
  );
};

export default Ads;
