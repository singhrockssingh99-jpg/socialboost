import React, { useState, useEffect } from 'react';
import { Search, Filter, Star, Phone, Mail, MapPin, CheckCircle, XCircle, Clock, Loader, X } from 'lucide-react';
import { supabase } from '../lib/supabaseClient';
import { useAuth } from '../contexts/AuthContext';
import toast from 'react-hot-toast';

interface Lead {
  id: number;
  name: string;
  email: string;
  phone: string;
  company: string;
  location: string;
  source: string;
  score: number;
  status: 'new' | 'nurturing' | 'qualified';
  last_contact: string;
  notes: string;
  avatar: string;
  user_id: string;
}

const Leads: React.FC = () => {
  const [leads, setLeads] = useState<Lead[]>([]);
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  const fetchLeads = async () => {
    if (!user) return;
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('leads')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setLeads(data || []);
    } catch (error: any) {
      toast.error('Leads fetch karne mein samasya hui.');
      console.error('Error fetching leads:', error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchLeads();
  }, [user]);

  const updateLeadStatus = async (leadId: number, status: Lead['status']) => {
    try {
      const { error } = await supabase
        .from('leads')
        .update({ status })
        .eq('id', leadId);

      if (error) throw error;
      
      toast.success(`Lead status "${getStatusLabel(status)}" par update ho gaya.`);
      fetchLeads(); // Refresh leads
      setSelectedLead(prev => prev ? { ...prev, status } : null);
    } catch (error: any) {
      toast.error('Lead status update karne mein samasya hui.');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'qualified': return 'bg-green-100 text-green-700';
      case 'nurturing': return 'bg-yellow-100 text-yellow-700';
      default: return 'bg-blue-100 text-blue-700';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'qualified': return CheckCircle;
      case 'nurturing': return Clock;
      default: return XCircle;
    }
  };
  
  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'new': return 'Naya';
      case 'nurturing': return 'Nurturing';
      case 'qualified': return 'Qualified';
      default: return status;
    }
  };

  return (
    <div className="p-4 md:p-6 lg:p-8 space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">Lead Manager</h1>
          <p className="text-gray-600 mt-1">Apne leads ko research, qualify, aur manage karein</p>
        </div>
        <button className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
          Leads Export Karein
        </button>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
        {[
          { label: 'Kul Leads', value: leads.length.toString() },
          { label: 'Qualified', value: leads.filter(l => l.status === 'qualified').length.toString() },
          { label: 'Avg. Score', value: leads.length > 0 ? Math.floor(leads.reduce((sum, l) => sum + l.score, 0) / leads.length).toString() : '0' },
        ].map((stat) => (
          <div key={stat.label} className="bg-white rounded-xl border border-gray-200 p-6">
            <p className="text-sm text-gray-600 font-medium">{stat.label}</p>
            <p className="text-3xl font-bold text-gray-900 mt-2">{stat.value}</p>
          </div>
        ))}
      </div>

      <div className="bg-white rounded-xl border border-gray-200">
        <div className="p-4 border-b border-gray-200">
          <div className="flex flex-col sm:flex-row gap-3">
            <div className="flex-1 relative">
              <Search size={18} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Leads khojein..."
                className="w-full pl-10 pr-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <button className="flex items-center justify-center gap-2 px-4 py-2.5 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
              <Filter size={18} />
              Filter
            </button>
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <Loader className="animate-spin text-blue-600" size={40} />
          </div>
        ) : leads.length === 0 ? (
          <div className="text-center py-16">
            <XCircle size={48} className="mx-auto text-gray-400" />
            <h3 className="mt-4 text-lg font-semibold text-gray-900">Koi leads nahi mile</h3>
            <p className="mt-1 text-gray-500">Aapke social campaigns se naye leads yahan dikhenge.</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b border-gray-200">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lead</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {leads.map((lead) => {
                  const StatusIcon = getStatusIcon(lead.status);
                  return (
                    <tr key={lead.id} className="hover:bg-gray-50 transition-colors">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center gap-3">
                          <img src={lead.avatar} alt={lead.name} className="w-10 h-10 rounded-full" />
                          <div>
                            <p className="font-semibold text-gray-900">{lead.name}</p>
                            <p className="text-sm text-gray-600">{lead.company}</p>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="space-y-1">
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <Mail size={14} />
                            <span className="truncate max-w-[200px]">{lead.email}</span>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <Phone size={14} />
                            <span>{lead.phone}</span>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="text-sm text-gray-900">{lead.source}</span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center gap-2">
                          <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-[80px]">
                            <div
                              className={`h-2 rounded-full ${lead.score >= 80 ? 'bg-green-600' : lead.score >= 60 ? 'bg-yellow-600' : 'bg-red-600'}`}
                              style={{ width: `${lead.score}%` }}
                            ></div>
                          </div>
                          <span className="text-sm font-semibold text-gray-900">{lead.score}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(lead.status)}`}>
                          <StatusIcon size={12} />
                          {getStatusLabel(lead.status)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <button
                          onClick={() => setSelectedLead(lead)}
                          className="text-sm font-medium text-blue-600 hover:text-blue-700"
                        >
                          Details Dekhein
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {selectedLead && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 flex items-center justify-between">
              <h2 className="text-xl font-bold text-gray-900">Lead Details</h2>
              <button
                onClick={() => setSelectedLead(null)}
                className="text-gray-400 hover:text-gray-600"
              >
                <X size={24} />
              </button>
            </div>
            <div className="p-6 space-y-6">
              <>
                <div className="flex items-start gap-4">
                  <img
                    src={selectedLead.avatar}
                    alt={selectedLead.name}
                    className="w-16 h-16 rounded-full"
                  />
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-gray-900">
                      {selectedLead.name}
                    </h3>
                    <p className="text-gray-600">{selectedLead.company}</p>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedLead.status)}`}>
                    {getStatusLabel(selectedLead.status)}
                  </span>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 text-gray-700">
                      <Mail size={18} />
                      <span>{selectedLead.email}</span>
                    </div>
                    <div className="flex items-center gap-2 text-gray-700">
                      <Phone size={18} />
                      <span>{selectedLead.phone}</span>
                    </div>
                    <div className="flex items-center gap-2 text-gray-700">
                      <MapPin size={18} />
                      <span>{selectedLead.location}</span>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <div>
                      <p className="text-sm text-gray-600">Lead Score</p>
                      <div className="flex items-center gap-2 mt-1">
                        <div className="flex-1 bg-gray-200 rounded-full h-3">
                          <div
                            className={`h-3 rounded-full ${selectedLead.score >= 80 ? 'bg-green-600' : 'bg-yellow-600'}`}
                            style={{ width: `${selectedLead.score}%` }}
                          ></div>
                        </div>
                        <span className="text-sm font-semibold">{selectedLead.score}/100</span>
                      </div>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Source</p>
                      <p className="font-medium text-gray-900 mt-1">{selectedLead.source}</p>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Notes</h4>
                  <p className="text-gray-700">{selectedLead.notes}</p>
                </div>

                <div className="flex gap-3">
                  <button 
                    onClick={() => updateLeadStatus(selectedLead.id, 'qualified')}
                    className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:bg-green-400"
                    disabled={selectedLead.status === 'qualified'}
                  >
                    Qualified Mark Karein
                  </button>
                  <button 
                    onClick={() => updateLeadStatus(selectedLead.id, 'nurturing')}
                    className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-blue-400"
                    disabled={selectedLead.status === 'nurturing'}
                  >
                    Nurturing Mark Karein
                  </button>
                </div>
              </>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Leads;
